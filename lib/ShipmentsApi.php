<?php
/**
 * ShipmentsApi
 * PHP version 5
 *
 * @category Class
 * @package  RoyalMail\Shipping\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Royal Mail API Shipping V3 (REST)
 *
 * API Shipping V3 (REST) provides the functionality for customers to take a shipping transaction from creation to collection.   It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic and international items with Royal Mail.  Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customers??? own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.
 *
 * OpenAPI spec version: 3.0.20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoyalMail\Shipping\Rest\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use RoyalMail\Shipping\Rest\Api\ApiException;
use RoyalMail\Shipping\Rest\Api\Configuration;
use RoyalMail\Shipping\Rest\Api\HeaderSelector;
use RoyalMail\Shipping\Rest\Api\ObjectSerializer;

/**
 * ShipmentsApi Class Doc Comment
 *
 * @category Class
 * @package  RoyalMail\Shipping\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation shipmentsCancel
     *
     * Cancel Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentCancelRequest[] $body Shipment Cancel Requests (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMail\Shipping\Rest\Api\models\ShipmentsCancelResponse
     */
    public function shipmentsCancel($body, $xRMGAuthToken)
    {
        list($response) = $this->shipmentsCancelWithHttpInfo($body, $xRMGAuthToken);
        return $response;
    }

    /**
     * Operation shipmentsCancelWithHttpInfo
     *
     * Cancel Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentCancelRequest[] $body Shipment Cancel Requests (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMail\Shipping\Rest\Api\models\ShipmentsCancelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsCancelWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\ShipmentsCancelResponse';
        $request = $this->shipmentsCancelRequest($body, $xRMGAuthToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ShipmentsCancelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ShipmentsCancelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ShipmentsCancelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsCancelAsync
     *
     * Cancel Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentCancelRequest[] $body Shipment Cancel Requests (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsCancelAsync($body, $xRMGAuthToken)
    {
        return $this->shipmentsCancelAsyncWithHttpInfo($body, $xRMGAuthToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsCancelAsyncWithHttpInfo
     *
     * Cancel Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentCancelRequest[] $body Shipment Cancel Requests (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsCancelAsyncWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\ShipmentsCancelResponse';
        $request = $this->shipmentsCancelRequest($body, $xRMGAuthToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsCancel'
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentCancelRequest[] $body Shipment Cancel Requests (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsCancelRequest($body, $xRMGAuthToken)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling shipmentsCancel'
            );
        }
        // verify the required parameter 'xRMGAuthToken' is set
        if ($xRMGAuthToken === null || (is_array($xRMGAuthToken) && count($xRMGAuthToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xRMGAuthToken when calling shipmentsCancel'
            );
        }

        $resourcePath = '/shipments/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRMGAuthToken !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($xRMGAuthToken);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsCreate
     *
     * Create Shipment
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\CreateShipmentShipment $body The shipment. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMail\Shipping\Rest\Api\models\ShipmentCreateResponse
     */
    public function shipmentsCreate($body, $xRMGAuthToken)
    {
        list($response) = $this->shipmentsCreateWithHttpInfo($body, $xRMGAuthToken);
        return $response;
    }

    /**
     * Operation shipmentsCreateWithHttpInfo
     *
     * Create Shipment
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\CreateShipmentShipment $body The shipment. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMail\Shipping\Rest\Api\models\ShipmentCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsCreateWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\ShipmentCreateResponse';
        $request = $this->shipmentsCreateRequest($body, $xRMGAuthToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ShipmentCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ShipmentCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsCreateAsync
     *
     * Create Shipment
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\CreateShipmentShipment $body The shipment. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsCreateAsync($body, $xRMGAuthToken)
    {
        return $this->shipmentsCreateAsyncWithHttpInfo($body, $xRMGAuthToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsCreateAsyncWithHttpInfo
     *
     * Create Shipment
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\CreateShipmentShipment $body The shipment. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsCreateAsyncWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\ShipmentCreateResponse';
        $request = $this->shipmentsCreateRequest($body, $xRMGAuthToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsCreate'
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\CreateShipmentShipment $body The shipment. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsCreateRequest($body, $xRMGAuthToken)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling shipmentsCreate'
            );
        }
        // verify the required parameter 'xRMGAuthToken' is set
        if ($xRMGAuthToken === null || (is_array($xRMGAuthToken) && count($xRMGAuthToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xRMGAuthToken when calling shipmentsCreate'
            );
        }

        $resourcePath = '/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRMGAuthToken !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($xRMGAuthToken);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsDefer
     *
     * Defer Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentDeferRequest[] $body The shipments to defer. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMail\Shipping\Rest\Api\models\ShipmentsDeferResponse
     */
    public function shipmentsDefer($body, $xRMGAuthToken)
    {
        list($response) = $this->shipmentsDeferWithHttpInfo($body, $xRMGAuthToken);
        return $response;
    }

    /**
     * Operation shipmentsDeferWithHttpInfo
     *
     * Defer Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentDeferRequest[] $body The shipments to defer. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMail\Shipping\Rest\Api\models\ShipmentsDeferResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsDeferWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\ShipmentsDeferResponse';
        $request = $this->shipmentsDeferRequest($body, $xRMGAuthToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ShipmentsDeferResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ShipmentsDeferResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ShipmentsDeferResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsDeferAsync
     *
     * Defer Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentDeferRequest[] $body The shipments to defer. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsDeferAsync($body, $xRMGAuthToken)
    {
        return $this->shipmentsDeferAsyncWithHttpInfo($body, $xRMGAuthToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsDeferAsyncWithHttpInfo
     *
     * Defer Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentDeferRequest[] $body The shipments to defer. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsDeferAsyncWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\ShipmentsDeferResponse';
        $request = $this->shipmentsDeferRequest($body, $xRMGAuthToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsDefer'
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentDeferRequest[] $body The shipments to defer. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsDeferRequest($body, $xRMGAuthToken)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling shipmentsDefer'
            );
        }
        // verify the required parameter 'xRMGAuthToken' is set
        if ($xRMGAuthToken === null || (is_array($xRMGAuthToken) && count($xRMGAuthToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xRMGAuthToken when calling shipmentsDefer'
            );
        }

        $resourcePath = '/shipments/defer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRMGAuthToken !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($xRMGAuthToken);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsHold
     *
     * Hold Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentHoldRequest[] $body The shipments to hold. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMail\Shipping\Rest\Api\models\ShipmentsHoldResponse
     */
    public function shipmentsHold($body, $xRMGAuthToken)
    {
        list($response) = $this->shipmentsHoldWithHttpInfo($body, $xRMGAuthToken);
        return $response;
    }

    /**
     * Operation shipmentsHoldWithHttpInfo
     *
     * Hold Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentHoldRequest[] $body The shipments to hold. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMail\Shipping\Rest\Api\models\ShipmentsHoldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsHoldWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\ShipmentsHoldResponse';
        $request = $this->shipmentsHoldRequest($body, $xRMGAuthToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ShipmentsHoldResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ShipmentsHoldResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ShipmentsHoldResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsHoldAsync
     *
     * Hold Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentHoldRequest[] $body The shipments to hold. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsHoldAsync($body, $xRMGAuthToken)
    {
        return $this->shipmentsHoldAsyncWithHttpInfo($body, $xRMGAuthToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsHoldAsyncWithHttpInfo
     *
     * Hold Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentHoldRequest[] $body The shipments to hold. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsHoldAsyncWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\ShipmentsHoldResponse';
        $request = $this->shipmentsHoldRequest($body, $xRMGAuthToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsHold'
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentHoldRequest[] $body The shipments to hold. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsHoldRequest($body, $xRMGAuthToken)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling shipmentsHold'
            );
        }
        // verify the required parameter 'xRMGAuthToken' is set
        if ($xRMGAuthToken === null || (is_array($xRMGAuthToken) && count($xRMGAuthToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xRMGAuthToken when calling shipmentsHold'
            );
        }

        $resourcePath = '/shipments/hold';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRMGAuthToken !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($xRMGAuthToken);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsPrintDocument
     *
     * Print Document
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\PrintDocumentRequest $body Print Document Request (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentId Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMail\Shipping\Rest\Api\models\PrintDocumentResponse
     */
    public function shipmentsPrintDocument($body, $xRMGAuthToken, $shipmentId)
    {
        list($response) = $this->shipmentsPrintDocumentWithHttpInfo($body, $xRMGAuthToken, $shipmentId);
        return $response;
    }

    /**
     * Operation shipmentsPrintDocumentWithHttpInfo
     *
     * Print Document
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\PrintDocumentRequest $body Print Document Request (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentId Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMail\Shipping\Rest\Api\models\PrintDocumentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsPrintDocumentWithHttpInfo($body, $xRMGAuthToken, $shipmentId)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\PrintDocumentResponse';
        $request = $this->shipmentsPrintDocumentRequest($body, $xRMGAuthToken, $shipmentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\PrintDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\PrintDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\PrintDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsPrintDocumentAsync
     *
     * Print Document
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\PrintDocumentRequest $body Print Document Request (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentId Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsPrintDocumentAsync($body, $xRMGAuthToken, $shipmentId)
    {
        return $this->shipmentsPrintDocumentAsyncWithHttpInfo($body, $xRMGAuthToken, $shipmentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsPrintDocumentAsyncWithHttpInfo
     *
     * Print Document
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\PrintDocumentRequest $body Print Document Request (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentId Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsPrintDocumentAsyncWithHttpInfo($body, $xRMGAuthToken, $shipmentId)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\PrintDocumentResponse';
        $request = $this->shipmentsPrintDocumentRequest($body, $xRMGAuthToken, $shipmentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsPrintDocument'
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\PrintDocumentRequest $body Print Document Request (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentId Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsPrintDocumentRequest($body, $xRMGAuthToken, $shipmentId)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling shipmentsPrintDocument'
            );
        }
        // verify the required parameter 'xRMGAuthToken' is set
        if ($xRMGAuthToken === null || (is_array($xRMGAuthToken) && count($xRMGAuthToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xRMGAuthToken when calling shipmentsPrintDocument'
            );
        }
        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling shipmentsPrintDocument'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/printDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRMGAuthToken !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($xRMGAuthToken);
        }

        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsPrintLabel
     *
     * Print Label
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\PrintLabelRequest $body Print Label Request (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentId Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMail\Shipping\Rest\Api\models\PrintLabelResponse
     */
    public function shipmentsPrintLabel($body, $xRMGAuthToken, $shipmentId)
    {
        list($response) = $this->shipmentsPrintLabelWithHttpInfo($body, $xRMGAuthToken, $shipmentId);
        return $response;
    }

    /**
     * Operation shipmentsPrintLabelWithHttpInfo
     *
     * Print Label
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\PrintLabelRequest $body Print Label Request (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentId Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMail\Shipping\Rest\Api\models\PrintLabelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsPrintLabelWithHttpInfo($body, $xRMGAuthToken, $shipmentId)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\PrintLabelResponse';
        $request = $this->shipmentsPrintLabelRequest($body, $xRMGAuthToken, $shipmentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\PrintLabelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\PrintLabelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\PrintLabelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsPrintLabelAsync
     *
     * Print Label
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\PrintLabelRequest $body Print Label Request (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentId Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsPrintLabelAsync($body, $xRMGAuthToken, $shipmentId)
    {
        return $this->shipmentsPrintLabelAsyncWithHttpInfo($body, $xRMGAuthToken, $shipmentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsPrintLabelAsyncWithHttpInfo
     *
     * Print Label
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\PrintLabelRequest $body Print Label Request (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentId Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsPrintLabelAsyncWithHttpInfo($body, $xRMGAuthToken, $shipmentId)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\PrintLabelResponse';
        $request = $this->shipmentsPrintLabelRequest($body, $xRMGAuthToken, $shipmentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsPrintLabel'
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\PrintLabelRequest $body Print Label Request (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentId Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsPrintLabelRequest($body, $xRMGAuthToken, $shipmentId)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling shipmentsPrintLabel'
            );
        }
        // verify the required parameter 'xRMGAuthToken' is set
        if ($xRMGAuthToken === null || (is_array($xRMGAuthToken) && count($xRMGAuthToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xRMGAuthToken when calling shipmentsPrintLabel'
            );
        }
        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling shipmentsPrintLabel'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/printLabel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRMGAuthToken !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($xRMGAuthToken);
        }

        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsRelease
     *
     * Release Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentsReleaseRequest $body Shipments Release Request (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMail\Shipping\Rest\Api\models\ShipmentsReleaseResponse
     */
    public function shipmentsRelease($body, $xRMGAuthToken)
    {
        list($response) = $this->shipmentsReleaseWithHttpInfo($body, $xRMGAuthToken);
        return $response;
    }

    /**
     * Operation shipmentsReleaseWithHttpInfo
     *
     * Release Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentsReleaseRequest $body Shipments Release Request (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMail\Shipping\Rest\Api\models\ShipmentsReleaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsReleaseWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\ShipmentsReleaseResponse';
        $request = $this->shipmentsReleaseRequest($body, $xRMGAuthToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ShipmentsReleaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ShipmentsReleaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ShipmentsReleaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsReleaseAsync
     *
     * Release Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentsReleaseRequest $body Shipments Release Request (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsReleaseAsync($body, $xRMGAuthToken)
    {
        return $this->shipmentsReleaseAsyncWithHttpInfo($body, $xRMGAuthToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsReleaseAsyncWithHttpInfo
     *
     * Release Shipments
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentsReleaseRequest $body Shipments Release Request (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsReleaseAsyncWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\ShipmentsReleaseResponse';
        $request = $this->shipmentsReleaseRequest($body, $xRMGAuthToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsRelease'
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentsReleaseRequest $body Shipments Release Request (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsReleaseRequest($body, $xRMGAuthToken)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling shipmentsRelease'
            );
        }
        // verify the required parameter 'xRMGAuthToken' is set
        if ($xRMGAuthToken === null || (is_array($xRMGAuthToken) && count($xRMGAuthToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xRMGAuthToken when calling shipmentsRelease'
            );
        }

        $resourcePath = '/shipments/release';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRMGAuthToken !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($xRMGAuthToken);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsServiceAvailability
     *
     * Service Availability
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ServiceAvailabilityShipment $body The shipment. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMail\Shipping\Rest\Api\models\ServiceAvailabilityResponse
     */
    public function shipmentsServiceAvailability($body, $xRMGAuthToken)
    {
        list($response) = $this->shipmentsServiceAvailabilityWithHttpInfo($body, $xRMGAuthToken);
        return $response;
    }

    /**
     * Operation shipmentsServiceAvailabilityWithHttpInfo
     *
     * Service Availability
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ServiceAvailabilityShipment $body The shipment. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMail\Shipping\Rest\Api\models\ServiceAvailabilityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsServiceAvailabilityWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\ServiceAvailabilityResponse';
        $request = $this->shipmentsServiceAvailabilityRequest($body, $xRMGAuthToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ServiceAvailabilityResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ServiceAvailabilityResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsServiceAvailabilityAsync
     *
     * Service Availability
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ServiceAvailabilityShipment $body The shipment. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsServiceAvailabilityAsync($body, $xRMGAuthToken)
    {
        return $this->shipmentsServiceAvailabilityAsyncWithHttpInfo($body, $xRMGAuthToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsServiceAvailabilityAsyncWithHttpInfo
     *
     * Service Availability
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ServiceAvailabilityShipment $body The shipment. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsServiceAvailabilityAsyncWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\ServiceAvailabilityResponse';
        $request = $this->shipmentsServiceAvailabilityRequest($body, $xRMGAuthToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsServiceAvailability'
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ServiceAvailabilityShipment $body The shipment. (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsServiceAvailabilityRequest($body, $xRMGAuthToken)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling shipmentsServiceAvailability'
            );
        }
        // verify the required parameter 'xRMGAuthToken' is set
        if ($xRMGAuthToken === null || (is_array($xRMGAuthToken) && count($xRMGAuthToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xRMGAuthToken when calling shipmentsServiceAvailability'
            );
        }

        $resourcePath = '/shipments/serviceAvailability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRMGAuthToken !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($xRMGAuthToken);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
